#include "ServerManager.hpp"
#include "Server.hpp"

/*============================================================================*/
/****************************  Static variables  ******************************/
/*============================================================================*/

/*============================================================================*/
/******************************  Constructor  *********************************/
/*============================================================================*/

ServerManager::ServerManager(char *config_path="default config_path")
{
    if (!(this->setConfigs(config_path)))
        throw exception;
}

ServerManager::ServerManager(const ServerManager& object)
{
}

/*============================================================================*/
/******************************  Destructor  **********************************/
/*============================================================================*/

ServerManager::~ServerManager()
{
}

/*============================================================================*/
/*******************************  Overload  ***********************************/
/*============================================================================*/

ServerManager& ServerManager::operator=(const ServerManager& object)
{
    return (*this);
}
/*============================================================================*/
/********************************  Getter  ************************************/
/*============================================================================*/

/*============================================================================*/
/********************************  Setter  ************************************/
/*============================================================================*/

/*============================================================================*/
/******************************  Exception  ***********************************/
/*============================================================================*/

/*============================================================================*/
/*********************************  Util  *************************************/
/*============================================================================*/

// Server 객체를 생성하여 _servers 벡터에 저장한다.
void ServerManger::initServers()
{
    ConfigureManager CM(this->_config_file_path);
    CM.parseConfigs()
    it = begin()
    ite = end()
    for (; it != ite; it++)
    {
        makeServer()
    }
    


}

void ServerManager::makeServer(struct s_config)
{
    try
    {
        Server _new_server(struct s_config server_conf);
        this->_servers.push_back(_new_server);
    }
    catch (std::exception& )
    {
        
    }
    
}

bool ServerManger::runServer()
{
    // infinite loop
        // select
        // accept
        
        //read
        //write
}

void ServerManager::exitServers()
{

}